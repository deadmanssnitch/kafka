AllCops:
  TargetRubyVersion: 2.6
  Exclude:
    - "bin/*"
    - "ext/tmp/*"
    - "ext/ports/*"

require:
  - rubocop-performance

#################
# [i] Overrides #
#################

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/HashAlignment:
  EnforcedLastArgumentHashStyle: ignore_implicit

# Align ends correctly.
Layout/EndAlignment:
  EnforcedStyleAlignWith: variable

Layout/LineLength:
  Max: 200

Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: true

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/SymbolArray:
  EnforcedStyle: brackets

Style/CollectionMethods:
  # Mapping from undesired method to desired_method
  # e.g. to use `detect` over `find`:
  #
  # CollectionMethods:
  #   PreferredMethods:
  #     find: detect
  PreferredMethods:
    reduce: 'inject'
    find: 'detect'
    each_with_index: 'each.with_index'

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

Style/SignalException:
  EnforcedStyle: only_raise

# Require that rescue blocks use the inferred StandardError rather than require
# the class to be specified.
Style/RescueStandardError:
  EnforcedStyle: "implicit"

Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    "%w": "[]"
    "%W": "[]"
    "%i": "[]"

Style/EmptyElse:
  EnforcedStyle: empty

Style/EmptyMethod:
  EnforcedStyle: expanded

Metrics/PerceivedComplexity:
  Max: 11

# As a wrapper around librdkafka there is little we can do to properly limit
# this.
Metrics/ParameterLists:
  Max: 6

#################
# Disabled cops #
#################
Style/ClassAndModuleChildren:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/EachWithObject:
  Enabled: false

Style/FormatString:
  Enabled: false

Style/Lambda:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Style/NegatedIf:
  Enabled: false

Style/Semicolon:
  Enabled: false

Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: false

Style/SingleLineBlockParams:
  Enabled: false

Style/WordArray:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/NumericLiterals:
  Enabled: false

Style/TrailingUnderscoreVariable:
  Enabled: false

Style/EmptyCaseCondition:
  Enabled: false

Style/WhileUntilModifier:
  Enabled: false

Lint/AssignmentInCondition:
  Enabled: false

# It was recommending parenthasizing blocks that were not ambiguous.
Lint/AmbiguousBlockAssociation:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Style/AsciiComments:
  Enabled: false

Performance/TimesMap:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/BracesAroundHashParameters:
  Enabled: false

Style/NumericPredicate:
  Enabled: false

Style/SafeNavigation:
  Enabled: false

# Fails for a pretty consistent pattern where we preemptively use a return in a
# conditional to allow future expansion of a method:
#
# def foo
#   if condition?
#     render action: :bar
#     return
#    end
#  end
Style/RedundantReturn:
  Enabled: false

# The goal of this cop is to improve readability for formatting strings and
# could be useful for complex formats. As of 2019-12-28 all of the offending
# instances are simple single value formats and wouldn't be any more readable.
Style/FormatStringToken:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false
