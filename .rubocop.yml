AllCops:
  TargetRubyVersion: 2.5
  SuggestExtensions: false
  Exclude:
    - "bin/*"
    - "ext/tmp/*"
    - "ext/ports/*"
    - "vendor/bundle/**/*"

require:
  - rubocop-performance

#################
# [i] Overrides #
#################

Bundler/OrderedGems:
  Enabled: true
  ConsiderPunctuation: true

Gemspec/DateAssignment:
  Enabled: true

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/HashAlignment:
  EnforcedLastArgumentHashStyle: ignore_implicit
  EnforcedHashRocketStyle: key
  EnforcedColonStyle: key

# Align ends correctly.
Layout/EndAlignment:
  EnforcedStyleAlignWith: variable

Layout/LineLength:
  Max: 200

Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: true

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space

Layout/SpaceAroundMethodCallOperator:
  Enabled: true

Layout/BeginEndAlignment:
  Enabled: true

Layout/SpaceBeforeBrackets:
  Enabled: true

Layout/LineEndStringConcatenationIndentation:
  Enabled: true

Lint/DeprecatedOpenSSLConstant:
  Enabled: true

Lint/DuplicateElsifCondition:
  Enabled: true

Lint/MixedRegexpCaptureTypes:
  Enabled: true

Lint/RaiseException:
  Enabled: true

Lint/StructNewOverride:
  Enabled: true

Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true

Lint/DuplicateRescueException:
  Enabled: true

Lint/EmptyConditionalBody:
  Enabled: true

Lint/FloatComparison:
  Enabled: true

Lint/MissingSuper:
  Enabled: true

Lint/OutOfRangeRegexpRef:
  Enabled: true

Lint/SelfAssignment:
  Enabled: true

Lint/TopLevelReturnWithArgument:
  Enabled: true

Lint/ConstantDefinitionInBlock:
  Enabled: true

Lint/DuplicateRequire:
  Enabled: true

Lint/EmptyFile:
  Enabled: true

Lint/IdentityComparison:
  Enabled: true

Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true

Lint/UselessMethodDefinition:
  Enabled: true

Lint/UselessTimes:
  Enabled: true

Lint/UnreachableLoop:
  Enabled: true

Lint/HashCompareByIdentity:
  Enabled: true

Lint/RedundantSafeNavigation:
  Enabled: true

Lint/DuplicateBranch:
  Enabled: false

Lint/DuplicateRegexpCharacterClassElement:
  Enabled: true

Lint/EmptyBlock:
  Enabled: true

Lint/EmptyClass:
  Enabled: true

Lint/NoReturnInBeginEndBlocks:
  Enabled: true

Lint/ToEnumArguments:
  Enabled: true

Lint/UnmodifiedReduceAccumulator:
  Enabled: true

Lint/DeprecatedConstants:
  Enabled: true

Lint/LambdaWithoutLiteralBlock:
  Enabled: true

Lint/RedundantDirGlobSort:
  Enabled: true

Lint/UnexpectedBlockArity:
  Enabled: true

Lint/AmbiguousAssignment:
  Enabled: true

Lint/NumberedParameterAssignment:
  Enabled: true

Lint/OrAssignmentToConstant:
  Enabled: true

Lint/SymbolConversion:
  Enabled: true
  EnforcedStyle: consistent

Lint/TripleQuotes:
  Enabled: true

Lint/EmptyInPattern:
  Enabled: true

Lint/AmbiguousRange:
  Enabled: true

Lint/AmbiguousOperatorPrecedence:
  Enabled: true

Lint/IncompatibleIoSelectWithFiberScheduler:
  Enabled: true

Style/AccessorGrouping:
  Enabled: true
  EnforcedStyle: separated

Style/ArrayCoercion:
  Enabled: true

Style/BisectedAttrAccessor:
  Enabled: true

Style/CaseLikeIf:
  Enabled: true

Style/ExponentialNotation:
  Enabled: true

Style/HashAsLastArrayItem:
  Enabled: true

Style/HashLikeCase:
  Enabled: true

Style/RedundantAssignment:
  Enabled: true

Style/RedundantFetchBlock:
  Enabled: true

Style/RedundantFileExtensionInRequire:
  Enabled: true

Style/RedundantRegexpCharacterClass:
  Enabled: true

Style/RedundantRegexpEscape:
  Enabled: true

Style/SlicingWithRange:
  Enabled: true

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/SymbolArray:
  EnforcedStyle: brackets

Style/CollectionMethods:
  # Mapping from undesired method to desired_method
  # e.g. to use `detect` over `find`:
  #
  # CollectionMethods:
  #   PreferredMethods:
  #     find: detect
  PreferredMethods:
    reduce: 'inject'
    find: 'detect'
    each_with_index: 'each.with_index'

Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

Style/SignalException:
  EnforcedStyle: only_raise

# Require that rescue blocks use the inferred StandardError rather than require
# the class to be specified.
Style/RescueStandardError:
  EnforcedStyle: "implicit"

Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Style/ExplicitBlockArgument:
  Enabled: true

Style/GlobalStdStream:
  Enabled: true

Style/OptionalBooleanParameter:
  Enabled: true

Style/SingleArgumentDig:
  Enabled: true

Style/StringConcatenation:
  Enabled: true

Style/CombinableLoops:
  Enabled: true

Style/KeywordParametersOrder:
  Enabled: true

Style/RedundantSelfAssignment:
  Enabled: true

# There are some instances where having a single nested conditional makes sense
# or is more readable than the alternative.
Style/SoleNestedConditional:
  Enabled: false

Style/InPatternThen:
  Enabled: true

Style/MultilineInPatternThen:
  Enabled: true

Style/QuotedSymbols:
  Enabled: true

Style/RedundantSelfAssignmentBranch:
  Enabled: true

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/EmptyLineBetweenDefs:
  AllowAdjacentOneLineDefs: true

Style/PercentLiteralDelimiters:
  PreferredDelimiters:
    "%w": "[]"
    "%W": "[]"
    "%i": "[]"

Style/EmptyElse:
  EnforcedStyle: empty

Style/EmptyMethod:
  EnforcedStyle: expanded

Style/ClassEqualityComparison:
  Enabled: true

Style/ArgumentsForwarding:
  Enabled: true

Style/CollectionCompact:
  Enabled: true

Style/DocumentDynamicEvalDefinition:
  Enabled: true

Style/NegatedIfElseCondition:
  Enabled: true

Style/NilLambda:
  Enabled: true

Style/SwapValues:
  Enabled: true

Style/RedundantArgument:
  Enabled: true

Style/HashExcept:
  Enabled: true

Style/IfWithBooleanLiteralBranches:
  Enabled: true

# Do not allow Ruby 3.0 "endless" methods (i.e. `def method() = x`) they are
# difficult to spot while skimming code.
Style/EndlessMethod:
  Enabled: true
  EnforcedStyle: "disallow"

Style/HashConversion:
  Enabled: true

Style/StringChars:
  Enabled: true

Metrics/PerceivedComplexity:
  Max: 14

# Disabled since we're binding to external code that we don't control and it's
# that external code which primarily violates this check.
Metrics/ParameterLists:
  Enabled: false

Naming/InclusiveLanguage:
  Enabled: true

Performance/AncestorsInclude:
  Enabled: true

Performance/BigDecimalWithNumericArgument:
  Enabled: true

Performance/RedundantSortBlock:
  Enabled: true

Performance/RedundantStringChars:
  Enabled: true

Performance/ReverseFirst:
  Enabled: true

Performance/SortReverse:
  Enabled: true

Performance/Squeeze:
  Enabled: true

Performance/StringInclude:
  Enabled: true

Performance/Sum:
  Enabled: true

Performance/ArraySemiInfiniteRangeSlice:
  Enabled: true

Performance/BlockGivenWithExplicitBlock:
  Enabled: true

Performance/CollectionLiteralInLoop:
  Enabled: true

Performance/ConstantRegexp:
  Enabled: true

Performance/MethodObjectAsBlock:
  Enabled: true

Performance/RedundantEqualityComparisonBlock:
  Enabled: true

Performance/RedundantSplitRegexpArgument:
  Enabled: true

Performance/MapCompact:
  Enabled: true

#################
# Disabled cops #
#################
Style/ClassAndModuleChildren:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/EachWithObject:
  Enabled: false

Style/FormatString:
  Enabled: false

Style/Lambda:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Style/NegatedIf:
  Enabled: false

Style/Semicolon:
  Enabled: false

Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: false

Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: false

Layout/MultilineMethodCallBraceLayout:
  Enabled: false

Style/SingleLineBlockParams:
  Enabled: false

Style/WordArray:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/NumericLiterals:
  Enabled: false

Style/TrailingUnderscoreVariable:
  Enabled: false

Style/EmptyCaseCondition:
  Enabled: false

Style/WhileUntilModifier:
  Enabled: false

Lint/AssignmentInCondition:
  Enabled: false

# It was recommending parenthasizing blocks that were not ambiguous.
Lint/AmbiguousBlockAssociation:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Style/AsciiComments:
  Enabled: false

Performance/TimesMap:
  Enabled: false

Style/GuardClause:
  Enabled: false

Style/NumericPredicate:
  Enabled: false

Style/SafeNavigation:
  Enabled: false

# Fails for a pretty consistent pattern where we preemptively use a return in a
# conditional to allow future expansion of a method:
#
# def foo
#   if condition?
#     render action: :bar
#     return
#    end
#  end
Style/RedundantReturn:
  Enabled: false

# The goal of this cop is to improve readability for formatting strings and
# could be useful for complex formats. As of 2019-12-28 all of the offending
# instances are simple single value formats and wouldn't be any more readable.
Style/FormatStringToken:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false
